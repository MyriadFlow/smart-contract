// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionEnded extends ethereum.Event {
  get params(): AuctionEnded__Params {
    return new AuctionEnded__Params(this);
  }
}

export class AuctionEnded__Params {
  _event: AuctionEnded;

  constructor(event: AuctionEnded) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auctioneer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get highestBidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AuctionStarted extends ethereum.Event {
  get params(): AuctionStarted__Params {
    return new AuctionStarted__Params(this);
  }
}

export class AuctionStarted__Params {
  _event: AuctionStarted;

  constructor(event: AuctionStarted) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metaDataURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get auctioneer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get basePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class BidPlaced extends ethereum.Event {
  get params(): BidPlaced__Params {
    return new BidPlaced__Params(this);
  }
}

export class BidPlaced__Params {
  _event: BidPlaced;

  constructor(event: BidPlaced) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ItemRemoved extends ethereum.Event {
  get params(): ItemRemoved__Params {
    return new ItemRemoved__Params(this);
  }
}

export class ItemRemoved__Params {
  _event: ItemRemoved;

  constructor(event: ItemRemoved) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metaDataURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ItemSold extends ethereum.Event {
  get params(): ItemSold__Params {
    return new ItemSold__Params(this);
  }
}

export class ItemSold__Params {
  _event: ItemSold;

  constructor(event: ItemSold) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metadataURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get updatedPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SaleStarted extends ethereum.Event {
  get params(): SaleStarted__Params {
    return new SaleStarted__Params(this);
  }
}

export class SaleStarted__Params {
  _event: SaleStarted;

  constructor(event: SaleStarted) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metaDataURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TimeUpdated extends ethereum.Event {
  get params(): TimeUpdated__Params {
    return new TimeUpdated__Params(this);
  }
}

export class TimeUpdated__Params {
  _event: TimeUpdated;

  constructor(event: TimeUpdated) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get updatedTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Marketplace__idToMarketItemResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNftContract(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getPrice(): BigInt {
    return this.value4;
  }

  getAuctioneEndTime(): BigInt {
    return this.value5;
  }

  getHighestBid(): BigInt {
    return this.value6;
  }

  getStatus(): i32 {
    return this.value7;
  }
}

export class Marketplace__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MARKETPLACE_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "MARKETPLACE_ADMIN_ROLE",
      "MARKETPLACE_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MARKETPLACE_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MARKETPLACE_ADMIN_ROLE",
      "MARKETPLACE_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  highestBidder(param0: BigInt): Address {
    let result = super.call(
      "highestBidder",
      "highestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_highestBidder(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "highestBidder",
      "highestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  idToMarketItem(param0: BigInt): Marketplace__idToMarketItemResult {
    let result = super.call(
      "idToMarketItem",
      "idToMarketItem(uint256):(uint256,address,uint256,address,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Marketplace__idToMarketItemResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toI32()
    );
  }

  try_idToMarketItem(
    param0: BigInt
  ): ethereum.CallResult<Marketplace__idToMarketItemResult> {
    let result = super.tryCall(
      "idToMarketItem",
      "idToMarketItem(uint256):(uint256,address,uint256,address,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__idToMarketItemResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toI32()
      )
    );
  }

  listItem(
    nftContract: Address,
    tokenId: BigInt,
    price: BigInt,
    forAuction: boolean,
    time: BigInt
  ): BigInt {
    let result = super.call(
      "listItem",
      "listItem(address,uint256,uint256,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromBoolean(forAuction),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );

    return result[0].toBigInt();
  }

  try_listItem(
    nftContract: Address,
    tokenId: BigInt,
    price: BigInt,
    forAuction: boolean,
    time: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "listItem",
      "listItem(address,uint256,uint256,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromBoolean(forAuction),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketplacePayoutAddress(): Address {
    let result = super.call(
      "marketplacePayoutAddress",
      "marketplacePayoutAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marketplacePayoutAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketplacePayoutAddress",
      "marketplacePayoutAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeeBasisPoint(): BigInt {
    let result = super.call(
      "platformFeeBasisPoint",
      "platformFeeBasisPoint():(uint96)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformFeeBasisPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeeBasisPoint",
      "platformFeeBasisPoint():(uint96)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): Marketplace__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );

    return new Marketplace__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<Marketplace__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateAuctionTime(itemId: BigInt, time: BigInt): BigInt {
    let result = super.call(
      "updateAuctionTime",
      "updateAuctionTime(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );

    return result[0].toBigInt();
  }

  try_updateAuctionTime(
    itemId: BigInt,
    time: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateAuctionTime",
      "updateAuctionTime(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updatePrice(itemId: BigInt, price: BigInt): BigInt {
    let result = super.call(
      "updatePrice",
      "updatePrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );

    return result[0].toBigInt();
  }

  try_updatePrice(itemId: BigInt, price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updatePrice",
      "updatePrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptBidAndEndAuctionCall extends ethereum.Call {
  get inputs(): AcceptBidAndEndAuctionCall__Inputs {
    return new AcceptBidAndEndAuctionCall__Inputs(this);
  }

  get outputs(): AcceptBidAndEndAuctionCall__Outputs {
    return new AcceptBidAndEndAuctionCall__Outputs(this);
  }
}

export class AcceptBidAndEndAuctionCall__Inputs {
  _call: AcceptBidAndEndAuctionCall;

  constructor(call: AcceptBidAndEndAuctionCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptBidAndEndAuctionCall__Outputs {
  _call: AcceptBidAndEndAuctionCall;

  constructor(call: AcceptBidAndEndAuctionCall) {
    this._call = call;
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class ConcludeAuctionCall extends ethereum.Call {
  get inputs(): ConcludeAuctionCall__Inputs {
    return new ConcludeAuctionCall__Inputs(this);
  }

  get outputs(): ConcludeAuctionCall__Outputs {
    return new ConcludeAuctionCall__Outputs(this);
  }
}

export class ConcludeAuctionCall__Inputs {
  _call: ConcludeAuctionCall;

  constructor(call: ConcludeAuctionCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConcludeAuctionCall__Outputs {
  _call: ConcludeAuctionCall;

  constructor(call: ConcludeAuctionCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get forAuction(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get time(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class RemoveItemCall extends ethereum.Call {
  get inputs(): RemoveItemCall__Inputs {
    return new RemoveItemCall__Inputs(this);
  }

  get outputs(): RemoveItemCall__Outputs {
    return new RemoveItemCall__Outputs(this);
  }
}

export class RemoveItemCall__Inputs {
  _call: RemoveItemCall;

  constructor(call: RemoveItemCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveItemCall__Outputs {
  _call: RemoveItemCall;

  constructor(call: RemoveItemCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class UpdateAuctionTimeCall extends ethereum.Call {
  get inputs(): UpdateAuctionTimeCall__Inputs {
    return new UpdateAuctionTimeCall__Inputs(this);
  }

  get outputs(): UpdateAuctionTimeCall__Outputs {
    return new UpdateAuctionTimeCall__Outputs(this);
  }
}

export class UpdateAuctionTimeCall__Inputs {
  _call: UpdateAuctionTimeCall;

  constructor(call: UpdateAuctionTimeCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateAuctionTimeCall__Outputs {
  _call: UpdateAuctionTimeCall;

  constructor(call: UpdateAuctionTimeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdatePriceCall extends ethereum.Call {
  get inputs(): UpdatePriceCall__Inputs {
    return new UpdatePriceCall__Inputs(this);
  }

  get outputs(): UpdatePriceCall__Outputs {
    return new UpdatePriceCall__Outputs(this);
  }
}

export class UpdatePriceCall__Inputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdatePriceCall__Outputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
