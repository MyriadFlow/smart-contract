// SPDX-License-Identifier: MIT

pragma solidity 0.8.17;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol";

/**
 * @dev {ERC1155} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a creator role that allows for token minting (creation)
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the creator and pauser
 * roles, as well as the default admin role, which will let it grant both creator
 * and pauser roles to other accounts.
 */
contract StoreFrontEdition is Context, AccessControlEnumerable, ERC1155Supply {
    using Counters for Counters.Counter;

    bytes32 public constant STOREFRONT_ADMIN_ROLE =
        keccak256("STOREFRONT_ADMIN_ROLE");
    bytes32 public constant STOREFRONT_OPERATOR_ROLE =
        keccak256("STOREFRONT_OPERATOR_ROLE");
    bytes32 public constant STOREFRONT_CREATOR_ROLE =
        keccak256("STOREFRONT_CREATOR_ROLE");

    Counters.Counter private _tokenIdTracker;

    // Optional mapping for token URIs
    mapping(uint256 => string) private _tokenURIs;

    address public marketplace;

    event AssetCreated(
        uint256 indexed tokenID,
        address indexed creator,
        uint256 indexed amount
    );
    event AssetDestroyed(uint indexed tokenId, address ownerOrApproved);

    using Strings for uint256;

    /**
     * @dev Grants `STOREFRONT_ADMIN_ROLE`, `STOREFRONT_CREATOR_ROLE` and `STOREFRONT_OPERATOR_ROLE` to the
     * account that deploys the contract.
     *
     */
    constructor(string memory URI, address marketplaceAddress) ERC1155(URI) {
        _setupRole(STOREFRONT_ADMIN_ROLE, _msgSender());

        marketplace = marketplaceAddress;

        _setRoleAdmin(STOREFRONT_ADMIN_ROLE, STOREFRONT_ADMIN_ROLE);
        _setRoleAdmin(STOREFRONT_CREATOR_ROLE, STOREFRONT_OPERATOR_ROLE);
        _setRoleAdmin(STOREFRONT_OPERATOR_ROLE, STOREFRONT_ADMIN_ROLE);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_safeMint}.
     *
     * Requirements:
     *
     * - the caller must have the `STOREFRONT_CREATOR_ROLE`.
     */
    function createAsset(
        uint256 amount,
        bytes memory data
    ) public onlyRole(STOREFRONT_CREATOR_ROLE) returns (uint256) {
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _tokenIdTracker.increment();
        uint256 currentTokenID = _tokenIdTracker.current();
        _mint(_msgSender(), currentTokenID, amount, data);

        // Approve marketplace to transfer NFTs
        setApprovalForAll(marketplace, true);

        emit AssetCreated(currentTokenID, _msgSender(), amount);
        return currentTokenID;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_safeMint}.
     *
     * Requirements:
     *
     * - the caller must have the `STOREFRONT_CREATOR_ROLE`.
     */
    function delegateAssetCreation(
        uint256 amount,
        bytes memory data
    ) public onlyRole(STOREFRONT_OPERATOR_ROLE) returns (uint256) {
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _tokenIdTracker.increment();
        uint256 currentTokenID = _tokenIdTracker.current();
        _mint(_msgSender(), currentTokenID, amount, data);

        // Approve marketplace to transfer NFTs
        setApprovalForAll(marketplace, true);

        emit AssetCreated(currentTokenID, _msgSender(), amount);
        return currentTokenID;
    }

    function destroyAsset(uint256 tokenId, uint256 amount) public {
        require(
            balanceOf(_msgSender(), tokenId) == amount,
            "StoreFrontCollection: Caller is not token owner or approved"
        );
        _burn(_msgSender(), tokenId, amount);
        emit AssetDestroyed(tokenId, _msgSender());
    }

    function setURI(string memory newuri) public onlyOwner {
        _setURI(newuri);
    }

    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual override(ERC1155Supply) {
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(
        bytes4 interfaceId
    )
        public
        view
        virtual
        override(AccessControlEnumerable, ERC1155)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
